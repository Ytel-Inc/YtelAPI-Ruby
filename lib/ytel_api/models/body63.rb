# ytel_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApi
  # Body63 Model.
  class Body63 < BaseModel
    # List of valid shortcode to your Ytel account
    # @return [String]
    attr_accessor :shortcode

    # User generated name of the shortcode
    # @return [String]
    attr_accessor :friendly_name

    # URL that can be requested to receive notification when call has ended. A
    # set of default parameters will be sent here once the call is finished.
    # @return [String]
    attr_accessor :callback_url

    # Specifies the HTTP method used to request the required StatusCallBackUrl
    # once call connects.
    # @return [String]
    attr_accessor :callback_method

    # URL used if any errors occur during execution of InboundXML or at initial
    # request of the required Url provided with the POST.
    # @return [String]
    attr_accessor :fallback_url

    # Specifies the HTTP method used to request the required FallbackUrl once
    # call connects.
    # @return [String]
    attr_accessor :fallback_url_method

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['shortcode'] = 'Shortcode'
      @_hash['friendly_name'] = 'FriendlyName'
      @_hash['callback_url'] = 'CallbackUrl'
      @_hash['callback_method'] = 'CallbackMethod'
      @_hash['fallback_url'] = 'FallbackUrl'
      @_hash['fallback_url_method'] = 'FallbackUrlMethod'
      @_hash
    end

    def initialize(shortcode = nil,
                   friendly_name = nil,
                   callback_url = nil,
                   callback_method = nil,
                   fallback_url = nil,
                   fallback_url_method = nil)
      @shortcode = shortcode
      @friendly_name = friendly_name
      @callback_url = callback_url
      @callback_method = callback_method
      @fallback_url = fallback_url
      @fallback_url_method = fallback_url_method
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      shortcode = hash['Shortcode']
      friendly_name = hash['FriendlyName']
      callback_url = hash['CallbackUrl']
      callback_method = hash['CallbackMethod']
      fallback_url = hash['FallbackUrl']
      fallback_url_method = hash['FallbackUrlMethod']

      # Create object from extracted values.
      Body63.new(shortcode,
                 friendly_name,
                 callback_url,
                 callback_method,
                 fallback_url,
                 fallback_url_method)
    end
  end
end
