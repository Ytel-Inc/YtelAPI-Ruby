# ytel_api
#
# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module YtelApi
  # Body Model.
  class Body < BaseModel
    # A valid Ytel Voice enabled number (E.164 format) that will be initiating
    # the phone call.
    # @return [String]
    attr_accessor :from

    # To number
    # @return [String]
    attr_accessor :to

    # URL requested once the call connects
    # @return [String]
    attr_accessor :url

    # Specifies the HTTP method used to request the required URL once call
    # connects.
    # @return [String]
    attr_accessor :method

    # URL that can be requested to receive notification when call has ended. A
    # set of default parameters will be sent here once the call is finished.
    # @return [String]
    attr_accessor :status_call_back_url

    # Specifies the HTTP methodlinkclass used to request StatusCallbackUrl.
    # @return [String]
    attr_accessor :status_call_back_method

    # URL requested if the initial Url parameter fails or encounters an error
    # @return [String]
    attr_accessor :fall_back_url

    # Specifies the HTTP method used to request the required FallbackUrl once
    # call connects.
    # @return [String]
    attr_accessor :fall_back_method

    # URL that can be requested every 60 seconds during the call to notify of
    # elapsed tim
    # @return [String]
    attr_accessor :heart_beat_url

    # Specifies the HTTP method used to request HeartbeatUrl.
    # @return [String]
    attr_accessor :heart_beat_method

    # Time (in seconds) Ytel should wait while the call is ringing before
    # canceling the call
    # @return [Integer]
    attr_accessor :timeout

    # DTMF Digits to play to the call once it connects. 0-9, #, or *
    # @return [String]
    attr_accessor :play_dtmf

    # Specifies if the caller id will be hidden
    # @return [Boolean]
    attr_accessor :hide_caller_id

    # Specifies if the call should be recorded
    # @return [Boolean]
    attr_accessor :record

    # Recording parameters will be sent here upon completion
    # @return [String]
    attr_accessor :record_call_back_url

    # Method used to request the RecordCallback URL.
    # @return [String]
    attr_accessor :record_call_back_method

    # Specifies if the call recording should be transcribed
    # @return [Boolean]
    attr_accessor :transcribe

    # Transcription parameters will be sent here upon completion
    # @return [String]
    attr_accessor :transcribe_call_back_url

    # How Ytel should handle the receiving numbers voicemail machine
    # @return [IfMachineEnum]
    attr_accessor :if_machine

    # URL requested when IfMachine=continue
    # @return [String]
    attr_accessor :if_machine_url

    # Method used to request the IfMachineUrl.
    # @return [String]
    attr_accessor :if_machine_method

    # Specify if survey should be enable or not
    # @return [Boolean]
    attr_accessor :feedback

    # The unique identifier for the survey.
    # @return [String]
    attr_accessor :survey_id

    # A mapping from model property names to API property names.
    def self.names
      @_hash = {} if @_hash.nil?
      @_hash['from'] = 'From'
      @_hash['to'] = 'To'
      @_hash['url'] = 'Url'
      @_hash['method'] = 'Method'
      @_hash['status_call_back_url'] = 'StatusCallBackUrl'
      @_hash['status_call_back_method'] = 'StatusCallBackMethod'
      @_hash['fall_back_url'] = 'FallBackUrl'
      @_hash['fall_back_method'] = 'FallBackMethod'
      @_hash['heart_beat_url'] = 'HeartBeatUrl'
      @_hash['heart_beat_method'] = 'HeartBeatMethod'
      @_hash['timeout'] = 'Timeout'
      @_hash['play_dtmf'] = 'PlayDtmf'
      @_hash['hide_caller_id'] = 'HideCallerId'
      @_hash['record'] = 'Record'
      @_hash['record_call_back_url'] = 'RecordCallBackUrl'
      @_hash['record_call_back_method'] = 'RecordCallBackMethod'
      @_hash['transcribe'] = 'Transcribe'
      @_hash['transcribe_call_back_url'] = 'TranscribeCallBackUrl'
      @_hash['if_machine'] = 'IfMachine'
      @_hash['if_machine_url'] = 'IfMachineUrl'
      @_hash['if_machine_method'] = 'IfMachineMethod'
      @_hash['feedback'] = 'Feedback'
      @_hash['survey_id'] = 'SurveyId'
      @_hash
    end

    def initialize(from = nil,
                   to = nil,
                   url = nil,
                   method = nil,
                   status_call_back_url = nil,
                   status_call_back_method = nil,
                   fall_back_url = nil,
                   fall_back_method = nil,
                   heart_beat_url = nil,
                   heart_beat_method = nil,
                   timeout = nil,
                   play_dtmf = nil,
                   hide_caller_id = nil,
                   record = nil,
                   record_call_back_url = nil,
                   record_call_back_method = nil,
                   transcribe = nil,
                   transcribe_call_back_url = nil,
                   if_machine = nil,
                   if_machine_url = nil,
                   if_machine_method = nil,
                   feedback = nil,
                   survey_id = nil)
      @from = from
      @to = to
      @url = url
      @method = method
      @status_call_back_url = status_call_back_url
      @status_call_back_method = status_call_back_method
      @fall_back_url = fall_back_url
      @fall_back_method = fall_back_method
      @heart_beat_url = heart_beat_url
      @heart_beat_method = heart_beat_method
      @timeout = timeout
      @play_dtmf = play_dtmf
      @hide_caller_id = hide_caller_id
      @record = record
      @record_call_back_url = record_call_back_url
      @record_call_back_method = record_call_back_method
      @transcribe = transcribe
      @transcribe_call_back_url = transcribe_call_back_url
      @if_machine = if_machine
      @if_machine_url = if_machine_url
      @if_machine_method = if_machine_method
      @feedback = feedback
      @survey_id = survey_id
    end

    # Creates an instance of the object from a hash.
    def self.from_hash(hash)
      return nil unless hash

      # Extract variables from the hash.
      from = hash['From']
      to = hash['To']
      url = hash['Url']
      method = hash['Method']
      status_call_back_url = hash['StatusCallBackUrl']
      status_call_back_method = hash['StatusCallBackMethod']
      fall_back_url = hash['FallBackUrl']
      fall_back_method = hash['FallBackMethod']
      heart_beat_url = hash['HeartBeatUrl']
      heart_beat_method = hash['HeartBeatMethod']
      timeout = hash['Timeout']
      play_dtmf = hash['PlayDtmf']
      hide_caller_id = hash['HideCallerId']
      record = hash['Record']
      record_call_back_url = hash['RecordCallBackUrl']
      record_call_back_method = hash['RecordCallBackMethod']
      transcribe = hash['Transcribe']
      transcribe_call_back_url = hash['TranscribeCallBackUrl']
      if_machine = hash['IfMachine']
      if_machine_url = hash['IfMachineUrl']
      if_machine_method = hash['IfMachineMethod']
      feedback = hash['Feedback']
      survey_id = hash['SurveyId']

      # Create object from extracted values.
      Body.new(from,
               to,
               url,
               method,
               status_call_back_url,
               status_call_back_method,
               fall_back_url,
               fall_back_method,
               heart_beat_url,
               heart_beat_method,
               timeout,
               play_dtmf,
               hide_caller_id,
               record,
               record_call_back_url,
               record_call_back_method,
               transcribe,
               transcribe_call_back_url,
               if_machine,
               if_machine_url,
               if_machine_method,
               feedback,
               survey_id)
    end
  end
end
